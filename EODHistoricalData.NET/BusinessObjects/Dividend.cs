// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using EODHistoricalData.NET;
//
//    var dividend = Dividend.FromJson(jsonString);

namespace EODHistoricalData.NET
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using System.Text.Json;
    using System.Text.Json.Serialization;

    public partial class Dividend
    {
        [JsonPropertyName("date")]
        public DateTimeOffset? Date { get; set; }

        [JsonPropertyName("declarationDate")]
        public DateTimeOffset? DeclarationDate { get; set; }

        [JsonPropertyName("recordDate")]
        public DateTimeOffset? RecordDate { get; set; }

        [JsonPropertyName("paymentDate")]
        public DateTimeOffset? PaymentDate { get; set; }

        [JsonPropertyName("period")]
        public string Period { get; set; }

        [JsonPropertyName("value")]
        public string Value { get; set; }

        [JsonPropertyName("unadjustedValue")]
        public string UnadjustedValue { get; set; }

        [JsonPropertyName("currency")]
        public string Currency { get; set; }
    }

    public partial class Dividend
    {
        public static List<Dividend> FromJson(string json) => JsonSerializer.Deserialize<List<Dividend>>(json, EODHistoricalData.NET.ConverterDividend.Settings);
    }

    public static class SerializeDividend
    {
        public static string ToJson(this List<Dividend> self) => JsonSerializer.Serialize(self, EODHistoricalData.NET.ConverterDividend.Settings);
    }

    internal static class ConverterDividend
    {
        public static List<string> Errors = new List<string>();
        public static readonly JsonSerializerOptions Settings = new JsonSerializerOptions
        {
            // MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            // DateParseHandling = DateParseHandling.None,
            // Converters =
            // {
            //     new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal },
            //     new NullConverter(),
            // },
            // Error = delegate (object sender, Newtonsoft.Json.Serialization.ErrorEventArgs args)
            // {
            //     Errors.Add(args.ErrorContext.Error.Message);
            //     args.ErrorContext.Handled = true;
            // },
        };
    }
}
