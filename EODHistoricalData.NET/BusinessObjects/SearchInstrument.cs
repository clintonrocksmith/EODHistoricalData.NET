// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using EODHistoricalData.NET;
//
//    var instrument = Instrument.FromJson(jsonString);

using System.Text.Json;
using System.Text.Json.Serialization;

namespace EODHistoricalData.NET
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;

    public partial class SearchInstrument
    {
        [JsonPropertyName("Code")]
        public string Code { get; set; }

        [JsonPropertyName("Name")]
        public string Name { get; set; }

        [JsonPropertyName("Country")]
        public string Country { get; set; }

        [JsonPropertyName("Exchange")]
        public string Exchange { get; set; }

        [JsonPropertyName("Currency")]
        public string Currency { get; set; }

        [JsonPropertyName("Type")]
        public string Type { get; set; }
        
        [JsonPropertyName("ISIN")]
        public string Isin { get; set; }
        
        [JsonPropertyName("previousClose")]
        public decimal PreviousClose { get; set; }
        
        [JsonPropertyName("previousCloseDate")]
        public DateTimeOffset PreviousCloseDate { get; set; }
    }
    
    public partial class SearchInstrument
    {
        public static List<SearchInstrument> FromJson(string json) => JsonSerializer.Deserialize<List<SearchInstrument>>(json, EODHistoricalData.NET.ConverterInstrument.Settings);
    }

    public static class SerializeSearchInstrument
    {
        public static string ToJson(this List<SearchInstrument> self) => JsonSerializer.Serialize(self, EODHistoricalData.NET.ConverterInstrument.Settings);
    }

    internal static class ConverterSearchInstrument
    {
        public static List<string> Errors = new List<string>();
        public static readonly JsonSerializerOptions Settings = new JsonSerializerOptions
        {
            // MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            // DateParseHandling = DateParseHandling.None,
            // Converters =
            // {
            //     new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal },
            //     new NullConverter(),
            // },
            // Error = delegate (object sender, Newtonsoft.Json.Serialization.ErrorEventArgs args)
            // {
            //     Errors.Add(args.ErrorContext.Error.Message);
            //     args.ErrorContext.Handled = true;
            // },
        };
    }
}
