// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using EODHistoricalData.NET;
//
//    var options = Options.FromJson(jsonString);

namespace EODHistoricalData.NET
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using System.Text.Json;
    using System.Text.Json.Serialization;

    public partial class Options
    {
        [JsonPropertyName("code")]
        public string Code { get; set; }

        [JsonPropertyName("exchange")]
        public string Exchange { get; set; }
        
        [JsonPropertyName("lastTradeDate")]
        public DateTime? LastTradeDate { get; set; }
        
        [JsonPropertyName("lastTradePrice")]
        public decimal? LastTradePrice { get; set; }

        [JsonPropertyName("data")]
        public List<Datum> Data { get; set; }
    }

    public partial class Datum
    {
        [JsonPropertyName("expirationDate")]
        public DateTimeOffset? ExpirationDate { get; set; }

        [JsonPropertyName("options")]
        public OptionsClass Options { get; set; }
    }

    public partial class OptionsClass
    {
        [JsonPropertyName("CALL")]
        public List<Characteristics> Call { get; set; }

        [JsonPropertyName("PUT")]
        public List<Characteristics> Put { get; set; }
    }

    public partial class Characteristics
    {
        [JsonPropertyName("contractName")]
        public string ContractName { get; set; }

        [JsonPropertyName("contractSize")]
        public ContractSize ContractSize { get; set; }

        [JsonPropertyName("currency")]
        public string Currency { get; set; }

        [JsonPropertyName("type")]
        public OptionsTypeEnum OptionType { get; set; }

        [JsonPropertyName("inTheMoney")]
        public bool InTheMoney { get; set; }

        [JsonPropertyName("lastTradeDateTime")]
        public string LastTradeDateTimeString { get; set; }

        [JsonPropertyName("expirationDate")]
        public DateTimeOffset? ExpirationDate { get; set; }

        [JsonPropertyName("strike")]
        public decimal Strike { get; set; }

        [JsonPropertyName("lastPrice")]
        public decimal? LastPrice { get; set; }

        [JsonPropertyName("bid")]
        public decimal? Bid { get; set; }

        [JsonPropertyName("ask")]
        public decimal? Ask { get; set; }

        [JsonPropertyName("change")]
        public decimal? Change { get; set; }

        [JsonPropertyName("changePercent")]
        public decimal? ChangePercent { get; set; }

        [JsonPropertyName("volume")]
        public long? Volume { get; set; }

        [JsonPropertyName("openInterest")]
        public long? OpenInterest { get; set; }

        [JsonPropertyName("impliedVolatility")]
        public decimal? ImpliedVolatility { get; set; }

        [JsonPropertyName("delta")]
        public decimal Delta { get; set; }

        [JsonPropertyName("gamma")]
        public decimal Gamma { get; set; }

        [JsonPropertyName("theta")]
        public decimal Theta { get; set; }

        [JsonPropertyName("vega")]
        public decimal Vega { get; set; }

        [JsonPropertyName("rho")]
        public decimal Rho { get; set; }

        [JsonPropertyName("theoretical")]
        public decimal Theoretical { get; set; }

        [JsonPropertyName("intrinsicValue")]
        public decimal IntrinsicValue { get; set; }

        [JsonPropertyName("timeValue")]
        public decimal TimeValue { get; set; }

        [JsonPropertyName("updatedAt")]
        public DateTimeOffset UpdatedAt { get; set; }

        [JsonIgnore]
        public DateTime? LastTradeDateTime { get; set; }
    }

    public enum ContractSize { Empty, Regular };
    
    public enum OptionsTypeEnum { Call, Put };
    
    public partial class Options
    {
        static void SetLastTradeDatime(List<Characteristics> options)
        {
            if (options != null)
            {
                foreach (Characteristics charac in options)
                {
                    if (!charac.LastTradeDateTimeString.StartsWith("0000"))
                        charac.LastTradeDateTime = DateTime.Parse(charac.LastTradeDateTimeString, CultureInfo.InvariantCulture);
                }
            }
        }

        public static Options FromJson(string json)
        {
            Options result = JsonConvert.DeserializeObject<Options>(json, EODHistoricalData.NET.Converter.Settings);
            foreach (Datum datum in result.Data)
            {
                SetLastTradeDatime(datum.Options.Call);
                SetLastTradeDatime(datum.Options.Put);
            }
            return result;
        }
    }

    public static class Serialize
    {
        public static string ToJson(this Options self) => JsonConvert.SerializeObject(self, EODHistoricalData.NET.Converter.Settings);
    }

    internal static class Converter
    {
        public static List<string> Errors = new List<string>();
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ContractSizeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal },
                new NullConverter(),
            },
            Error = delegate (object sender, Newtonsoft.Json.Serialization.ErrorEventArgs args)
            {
                Errors.Add(args.ErrorContext.Error.Message);
                args.ErrorContext.Handled = true;
            },
        };
    }

    internal class ContractSizeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ContractSize) || t == typeof(ContractSize?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return ContractSize.Empty;
                case "REGULAR":
                    return ContractSize.Regular;
            }
            throw new Exception("Cannot unmarshal type ContractSize");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ContractSize)untypedValue;
            switch (value)
            {
                case ContractSize.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case ContractSize.Regular:
                    serializer.Serialize(writer, "REGULAR");
                    return;
            }
            throw new Exception("Cannot marshal type ContractSize");
        }

        public static readonly ContractSizeConverter Singleton = new ContractSizeConverter();
    }

    internal class OptionsTypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(OptionsTypeEnum) || t == typeof(OptionsTypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "CALL":
                    return OptionsTypeEnum.Call;
                case "PUT":
                    return OptionsTypeEnum.Put;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (OptionsTypeEnum)untypedValue;
            switch (value)
            {
                case OptionsTypeEnum.Call:
                    serializer.Serialize(writer, "CALL");
                    return;
                case OptionsTypeEnum.Put:
                    serializer.Serialize(writer, "PUT");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly OptionsTypeEnumConverter Singleton = new OptionsTypeEnumConverter();
    }
}
