// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using EODHistoricalData.NET;
//
//    var realTimePrice = RealTimePrice.FromJson(jsonString);

namespace EODHistoricalData.NET
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using System.Text.Json;
    using System.Text.Json.Serialization;

    public partial class RealTimePrice
    {
        [JsonPropertyName("code")]
        public string Code { get; set; }

        [JsonPropertyName("timestamp")]
        public long Timestamp { get; set; }

        [JsonPropertyName("gmtoffset")]
        public long Gmtoffset { get; set; }

        [JsonPropertyName("open")]
        public double Open { get; set; }

        [JsonPropertyName("high")]
        public double High { get; set; }

        [JsonPropertyName("low")]
        public double Low { get; set; }

        [JsonPropertyName("close")]
        public double Close { get; set; }

        [JsonPropertyName("volume")]
        public long Volume { get; set; }

        [JsonPropertyName("previousClose")]
        public double PreviousClose { get; set; }

        [JsonPropertyName("change")]
        public double Change { get; set; }

        [JsonPropertyName("change_p")]
        public double ChangeP { get; set; }

        [JsonIgnore]
        public DateTime TimestampAsDateTime { get; set; }

        [JsonIgnore]
        public List<string> ErrorMessages { get; set; }
    }

    public partial class RealTimePrice
    {
        public static RealTimePrice FromJson(string json)
        {
            RealTimePrice result = JsonConvert.DeserializeObject<RealTimePrice>(json, EODHistoricalData.NET.ConverterRealTimePrice.Settings);
            result.ErrorMessages = ConverterRealTimePrice.Errors;
            result.TimestampAsDateTime = DateTimeOffset.FromUnixTimeSeconds(result.Timestamp).DateTime;
            return result;
        }
    }

    public static class SerializeRealTimePrice
    {
        public static string ToJson(this RealTimePrice self) => JsonConvert.SerializeObject(self, EODHistoricalData.NET.ConverterRealTimePrice.Settings);

        public static List<RealTimePrice> GetListFromJson(string json)
        {
            List<RealTimePrice> prices = JsonConvert.DeserializeObject<List<RealTimePrice>>(json, EODHistoricalData.NET.ConverterRealTimePrice.Settings);
            prices.ForEach(x => x.TimestampAsDateTime = DateTimeOffset.FromUnixTimeSeconds(x.Timestamp).DateTime);
            return prices;
        }
    }

    internal static class ConverterRealTimePrice
    {
        public static List<string> Errors = new List<string>();
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal },
                new NullConverter(),
            },
            Error = delegate (object sender, Newtonsoft.Json.Serialization.ErrorEventArgs args)
            {
                Errors.Add(args.ErrorContext.Error.Message);
                args.ErrorContext.Handled = true;
            },
        };
    }
}
