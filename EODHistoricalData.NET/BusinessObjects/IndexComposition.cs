// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using EODHistoricalData.NET;
//
//    var indexComposition = IndexComposition.FromJson(jsonString);

namespace EODHistoricalData.NET
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using EODHistoricalData.NET.BusinessObjects;
    using System.Text.Json;
    using System.Text.Json.Serialization;

    public partial class IndexComposition
    {
        [JsonPropertyName("General")]
        public FundamentalGeneral General { get; set; }

        [JsonPropertyName("Components")]
        public Dictionary<string, Component> Components { get; set; }
    }

    public partial class Component
    {
        [JsonPropertyName("Code")]
        public string Code { get; set; }

        [JsonPropertyName("Exchange")]
        public string Exchange { get; set; }

        [JsonPropertyName("Name")]
        public string Name { get; set; }

        [JsonPropertyName("Sector")]
        public string Sector { get; set; }

        [JsonPropertyName("Industry")]
        public string Industry { get; set; }
    }
    
    public partial class IndexComposition
    {
        public static IndexComposition FromJson(string json) => JsonSerializer.Deserialize<IndexComposition>(json, EODHistoricalData.NET.ConverterIndexComposition.Settings);
    }

    public static class SerializeIndexComposition
    {
        public static string ToJson(this IndexComposition self) => JsonSerializer.Serialize(self, EODHistoricalData.NET.ConverterIndexComposition.Settings);
    }

    internal static class ConverterIndexComposition
    {
        public static List<string> Errors = new List<string>();
        public static readonly JsonSerializerOptions Settings = new JsonSerializerOptions
        {
            // MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            // DateParseHandling = DateParseHandling.None,
            // Converters =
            // {
            //     new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal },
            //     new NullConverter(),
            // },
            // Error = delegate (object sender, Newtonsoft.Json.Serialization.ErrorEventArgs args)
            // {
            //     Errors.Add(args.ErrorContext.Error.Message);
            //     args.ErrorContext.Handled = true;
            // },
        };
    }
}
