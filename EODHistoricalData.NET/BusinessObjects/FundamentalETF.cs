// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using EODHistoricalData.NET;
//
//    var fundamentalEtFs = FundamentalEtFs.FromJson(jsonString);

namespace EODHistoricalData.NET
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using EODHistoricalData.NET.BusinessObjects;
    using System.Text.Json;
    using System.Text.Json.Serialization;

    public partial class FundamentalETF
    {
        [JsonPropertyName("General")]
        public FundamentalGeneral General { get; set; }

        [JsonPropertyName("Technicals")]
        public FundamentalTechnicals Technicals { get; set; }

        [JsonPropertyName("ETF_Data")]
        public EtfData EtfData { get; set; }
    }

    public partial class EtfData
    {
        [JsonPropertyName("ISIN")]
        public string Isin { get; set; }

        [JsonPropertyName("Company_Name")]
        public string CompanyName { get; set; }

        [JsonPropertyName("Company_URL")]
        public Uri CompanyUrl { get; set; }

        [JsonPropertyName("ETF_URL")]
        public Uri EtfUrl { get; set; }

        [JsonPropertyName("Yield")]
        public decimal? Yield { get; set; }

        [JsonPropertyName("Dividend_Paying_Frequency")]
        public string DividendPayingFrequency { get; set; }

        [JsonPropertyName("Inception_Date")]
        public DateTimeOffset? InceptionDate { get; set; }

        [JsonPropertyName("Max_Annual_Mgmt_Charge")]
        public decimal? MaxAnnualMgmtCharge { get; set; }

        [JsonPropertyName("Ongoing_Charge")]
        public decimal? OngoingCharge { get; set; }

        [JsonPropertyName("Date_Ongoing_Charge")]
        public string DateOngoingCharge { get; set; }

        [JsonPropertyName("NetExpenseRatio")]
        public decimal? NetExpenseRatio { get; set; }

        [JsonPropertyName("AnnualHoldingsTurnover")]
        public decimal? AnnualHoldingsTurnover { get; set; }

        [JsonPropertyName("TotalAssets")]
        public decimal? TotalAssets { get; set; }

        [JsonPropertyName("Average_Mkt_Cap_Mil")]
        public string AverageMktCapMil { get; set; }

        [JsonPropertyName("Market_Capitalisation")]
        public MarketCapitalisation MarketCapitalisation { get; set; }

        [JsonPropertyName("Asset_Allocation")]
        public AssetAllocation AssetAllocation { get; set; }

        [JsonPropertyName("World_Regions")]
        public Dictionary<string, AllocWeight> WorldRegions { get; set; }

        [JsonPropertyName("Sector_Weights")]
        public Dictionary<string, AllocWeight> SectorWeights { get; set; }

        [JsonPropertyName("Top_10_Holdings")]
        public Dictionary<string, Holding> Top10_Holdings { get; set; }

        [JsonPropertyName("Holdings")]
        public Dictionary<string, Holding> Holdings { get; set; }

        [JsonPropertyName("Valuations_Growth")]
        public ValuationsGrowth ValuationsGrowth { get; set; }

        [JsonPropertyName("MorningStar")]
        public MorningStar MorningStar { get; set; }

        [JsonPropertyName("Performance")]
        public Performance Performance { get; set; }
    }

    public partial class AssetAllocation
    {
        [JsonPropertyName("Stock")]
        public Allocation Stock { get; set; }

        [JsonPropertyName("Bond")]
        public Allocation Bond { get; set; }

        [JsonPropertyName("Property")]
        public Allocation Property { get; set; }

        [JsonPropertyName("Cash")]
        public Allocation Cash { get; set; }

        [JsonPropertyName("Other")]
        public Allocation Other { get; set; }
    }

    public partial class Allocation
    {
        [JsonPropertyName("Long_ % ")]
        public decimal? Long { get; set; }

        [JsonPropertyName("Short_ % ")]
        public decimal? Short { get; set; }

        [JsonPropertyName("Net_Assets_ % ")]
        public decimal? NetAssets { get; set; }
    }

    public partial class Holding
    {
        [JsonPropertyName("Code")]
        public string Code { get; set; }

        [JsonPropertyName("Name")]
        public string Name { get; set; }

        [JsonPropertyName("Sector")]
        public string Sector { get; set; }

        [JsonPropertyName("Industry")]
        public string Industry { get; set; }

        [JsonPropertyName("Country")]
        public string Country { get; set; }

        [JsonPropertyName("Region")]
        public string Region { get; set; }

        [JsonPropertyName("Assets_ % ")]
        public decimal? Assets { get; set; }
    }

    public partial class MarketCapitalisation
    {
        [JsonPropertyName("Mega")]
        public decimal? Mega { get; set; }

        [JsonPropertyName("Big")]
        public decimal? Big { get; set; }

        [JsonPropertyName("Medium")]
        public decimal? Medium { get; set; }

        [JsonPropertyName("Small")]
        public decimal? Small { get; set; }

        [JsonPropertyName("Micro")]
        public decimal? Micro { get; set; }
    }

    public partial class MorningStar
    {
        [JsonPropertyName("Ratio")]
        public long Ratio { get; set; }

        [JsonPropertyName("Category_Benchmark")]
        public string CategoryBenchmark { get; set; }

        [JsonPropertyName("Sustainability_Ratio")]
        public long SustainabilityRatio { get; set; }
    }

    public partial class Performance
    {
        [JsonPropertyName("3y_Volatility")]
        public decimal? The3YVolatility { get; set; }

        [JsonPropertyName("3y_ExpReturn")]
        public decimal? The3YExpReturn { get; set; }

        [JsonPropertyName("3y_SharpRatio")]
        public decimal? The3YSharpRatio { get; set; }

        [JsonPropertyName("Returns_YTD")]
        public decimal? ReturnsYtd { get; set; }

        [JsonPropertyName("Returns_3Y")]
        public decimal? Returns3Y { get; set; }

        [JsonPropertyName("Returns_5Y")]
        public decimal? Returns5Y { get; set; }

        [JsonPropertyName("Returns_10Y")]
        public decimal? Returns10Y { get; set; }
    }

    public partial class AllocWeight
    {
        [JsonPropertyName("Equity_ % ")]
        public decimal? Equity { get; set; }

        [JsonPropertyName("Relative_to_Category")]
        public decimal? RelativeToCategory { get; set; }
    }

    public partial class ValuationsGrowth
    {
        [JsonPropertyName("Valuations_Rates_Portfolio")]
        public ValuationsRates ValuationsRatesPortfolio { get; set; }

        [JsonPropertyName("Valuations_Rates_To_Category")]
        public ValuationsRates ValuationsRatesToCategory { get; set; }

        [JsonPropertyName("Growth_Rates_Portfolio")]
        public GrowthRates GrowthRatesPortfolio { get; set; }

        [JsonPropertyName("Growth_Rates_To_Category")]
        public GrowthRates GrowthRatesToCategory { get; set; }
    }

    public partial class GrowthRates
    {
        [JsonPropertyName("Long-Term Projected Earnings Growth")]
        public decimal? LongTermProjectedEarningsGrowth { get; set; }

        [JsonPropertyName("Historical Earnings Growth")]
        public decimal? HistoricalEarningsGrowth { get; set; }

        [JsonPropertyName("Sales Growth")]
        public decimal? SalesGrowth { get; set; }

        [JsonPropertyName("Cash-Flow Growth")]
        public decimal? CashFlowGrowth { get; set; }

        [JsonPropertyName("Book-Value Growth")]
        public decimal? BookValueGrowth { get; set; }
    }

    public partial class ValuationsRates
    {
        [JsonPropertyName("Price/Prospective Earnings")]
        public decimal? PriceProspectiveEarnings { get; set; }

        [JsonPropertyName("Price/Book")]
        public decimal? PriceBook { get; set; }

        [JsonPropertyName("Price/Sales")]
        public decimal? PriceSales { get; set; }

        [JsonPropertyName("Price/Cash Flow")]
        public decimal? PriceCashFlow { get; set; }

        [JsonPropertyName("Dividend-Yield Factor")]
        public decimal? DividendYieldFactor { get; set; }
    }
    
    public partial class FundamentalETF
    {
        public static FundamentalETF FromJson(string json) => JsonSerializer.Deserialize<FundamentalETF>(json, EODHistoricalData.NET.ConverterFundamentalETF.Settings);
    }

    public static class SerializeFundamentalETF
    {
        public static string ToJson(this FundamentalETF self) => JsonSerializer.Serialize(self, EODHistoricalData.NET.ConverterFundamentalETF.Settings);
    }

    internal static class ConverterFundamentalETF
    {
        public static List<string> Errors = new List<string>();
        public static readonly JsonSerializerOptions Settings = new JsonSerializerOptions
        {
            // MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            // DateParseHandling = DateParseHandling.None,
            // Converters =
            // {
            //     new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal },
            //     new NullConverter(),
            // },
            // Error = delegate (object sender, Newtonsoft.Json.Serialization.ErrorEventArgs args)
            // {
            //     Errors.Add(args.ErrorContext.Error.Message);
            //     args.ErrorContext.Handled = true;
            // },
        };
    }
}
